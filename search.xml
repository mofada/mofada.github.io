<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>NestedScrollView/ScrollView 设置文字自动滑动</title>
      <link href="/2018/07/20/NestedScrollView/"/>
      <url>/2018/07/20/NestedScrollView/</url>
      <content type="html"><![CDATA[<p>首先让我们看一个gif,来了解一下发生了什么<br><img src="/2018/07/20/NestedScrollView/Screenrecord.gif" alt="gif"></p><p>可以看到在这个界面中,点击了 + 号界面会自动滑动,从原来的顶部移动到点击的位置附近,我们看下代码<br>首先看一下布局<br><img src="/2018/07/20/NestedScrollView/layout.png" alt="布局界面"><br>可以看到,最外层是一个ConstraintLayout,然后嵌套了一个SmartRefreshLayout,再就是NestedScrollView,然后在界面中,我们点击了加号,就会把TextView的数量进行+1,可以发现ScrollView会进行滑动.</p><pre><code>tvMainGoodsNumber.setText(mDetailGson.getGoodsBean().numText());  </code></pre><p>当去掉setText()方法会发现不会滑动,猜测是setText()时发生了不为人知的事情….</p><p>解决方法有两种<br>1.在ScrollView的父布局,在我的布局中就是SmartRefreshLayout中添加  </p><pre><code>android:focusable=&quot;false&quot;android:focusableInTouchMode=&quot;true&quot;  </code></pre><p><img src="/2018/07/20/NestedScrollView/method1.png" alt="方法一"></p><p>2.重写NestedScrollView,并复写requestChildFocus(View child, View focused)方法</p><pre><code>public class ChildScrollView extends NestedScrollView {    public ChildScrollView(Context context) {        super(context);    }    public ChildScrollView(Context context, AttributeSet attrs) {        super(context, attrs);    }    public ChildScrollView(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);    }    @Override    public void requestChildFocus(View child, View focused) {    }}</code></pre><p>当设置文字时,ScrollView会调用requestChildFocus方法获取焦点,从而进行滑动</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> ScrollView </tag>
            
            <tag> NestedScrollView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OKHTTP Session（会话保持）</title>
      <link href="/2018/07/19/OkHttp-Session/"/>
      <url>/2018/07/19/OkHttp-Session/</url>
      <content type="html"><![CDATA[<p>OkHttp不会自动保存session会话,需要我们手动去设置,代码如下</p><pre><code>mOkHttpClient = new OkHttpClient.Builder()    //设置连接超时    .connectTimeout(CONNECT_TIME_OUT, TimeUnit.SECONDS)    .readTimeout(READ_TIME_OUT, TimeUnit.SECONDS)    .writeTimeout(WRITE_TIME_OUT, TimeUnit.SECONDS)    //设置cookie    .cookieJar(new CookManager())    .build();</code></pre><p>在builder中设置cookieJar,但是cookieJar是个接口类,自定义一个CookManager类实现CookieJar接口.</p><pre><code>public class CookManager implements CookieJar {    //这里一定一定一定是HashMap&lt;String, List&lt;Cookie&gt;&gt;,是String,不是url.    private final HashMap&lt;String, List&lt;Cookie&gt;&gt; cookieStore = new HashMap&lt;&gt;();    @Override    public void saveFromResponse(HttpUrl url, List&lt;Cookie&gt; cookies) {        cookieStore.put(url.host(), cookies);    }    @Override    public List&lt;Cookie&gt; loadForRequest(HttpUrl url) {        List&lt;Cookie&gt; cookies = cookieStore.get(url.host());        return cookies != null ? cookies : new ArrayList&lt;Cookie&gt;();    }}</code></pre><p>!!!!!注意注意注意!!!!!!<br>HashMap的key是String!!!!直接传进去url,是没有效果的!!!!!</p><p>如何持久化?</p><pre><code>@Overridepublic void saveFromResponse(HttpUrl url, List&lt;Cookie&gt; cookies) {//session持久化方法,保存session参数for (Cookie cookie : cookies) {    Log.d(TAG, &quot;saveFromResponse() called with: url = [&quot; + url + &quot;], cookies = [&quot; + cookie + &quot;]&quot;);    Log.d(&quot;CookManager&quot;, &quot;saveFromResponse(CookManager.java:28): &quot; + cookie.name());    Log.d(&quot;CookManager&quot;, &quot;saveFromResponse(CookManager.java:28): &quot; + cookie.value());    Log.d(&quot;CookManager&quot;, &quot;saveFromResponse(CookManager.java:28): &quot; + cookie.domain());}Cookie cookie =new Cookie.Builder()        .name(&quot;JSESSIONID&quot;)        .value(&quot;FA69B5065A28377813B58E91004472B7&quot;)        .path(&quot;/foundation/&quot;)        .domain(&quot;115.29.186.247&quot;)        .build();cookies = new ArrayList&lt;Cookie&gt;();cookies.add(cookie);cookieStore.put(url.host(), cookies);}</code></pre><p>思路如上,保存Cookie基本参数，因业务不同而不同，如我的项目只需保存JSESSIONID,以及对应的值，path需要自己获取,domain不能为空，否则程序直接崩溃。在saveFromResponse方法中进行存储（本地存储），在loadForRequest中获取出来即可。</p>]]></content>
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android http </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Windows下搭建Github博客</title>
      <link href="/2018/07/19/build-blog/"/>
      <url>/2018/07/19/build-blog/</url>
      <content type="html"><![CDATA[<h1 id="这个文章干嘛的"><a href="#这个文章干嘛的" class="headerlink" title="这个文章干嘛的"></a>这个文章干嘛的</h1><p>这个文章教你使用Hexo的搭建Github个人博客，从0开始搭建，因为本人也是刚刚搭建好，好了，开始吧。<br><img src="/2018/07/19/build-blog/mofada.png" alt="我的博客"></p><h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><p>安装前提</p><ul><li><a href="https:  #git-scm.com/" target="_blank" rel="noopener">Git</a></li><li><a href="https:  #nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li></ul><p>1.git安装(<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a>)<br><img src="/2018/07/19/build-blog/git-down.png" alt="Git下载"></p><p>2.NodeJs安装(<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a>)<br><img src="/2018/07/19/build-blog/nodejs-down.png" alt="NodeJs"></p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>1.打开git-bash<br><img src="/2018/07/19/build-blog/git-open.png" alt="打开git"></p><p>2.切换到你要部署的目录</p><blockquote><p>如: D:\Hexo<br>cd D:   #切换到D盘<br>mkdir Hexo   #创建目录Hexo</p></blockquote><p><img src="/2018/07/19/build-blog/mkdir-hexo.png" alt="创建文件夹"></p><p>3.安装hexo</p><blockquote><p>cd Hexo   #切换到hexo目录<br>npm install -g hexo-cli   #安装hexo</p></blockquote><p>…….等待<br><img src="/2018/07/19/build-blog/install.png" alt="安装完成"></p><p>4.初始化</p><blockquote><p>hexo init   #初始化<br>npm install   #安装所需要的文件</p></blockquote><p><img src="/2018/07/19/build-blog/inited.png" alt="初始化完成"></p><p><img src="/2018/07/19/build-blog/npm-install.png" alt="文件安装"></p><p>5.安装完成,目录结构如下</p><blockquote><p>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes  </p></blockquote><p>6.启动hexo</p><blockquote><p>hexo g   #生成静态文件<br>hexo s   #启动服务器</p></blockquote><p><img src="/2018/07/19/build-blog/hexo-s.png" alt="启动服务器"></p><p>打开浏览器输入(<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>) 可查看(端口根据实际使用的端口)<br><img src="/2018/07/19/build-blog/default-theme.png" alt="启动服务器"></p><p>7.修改主题<br>什么,你觉得界面很丑不好看?我们可以更换<a href="https://hexo.io/themes" target="_blank" rel="noopener">主题</a>,找了半天发现一个还不错的主题<a href="https://github.com/Fechin/hexo-theme-diaspora" target="_blank" rel="noopener">hexo-theme-diaspora</a>,我们以这个为准切换主题<br><img src="/2018/07/19/build-blog/diaspora.png" alt="diaspora"></p><p>首先下载主题:</p><blockquote><p>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:Fechin/hexo-theme-diaspora.git themes/diaspora</p></blockquote><p><img src="/2018/07/19/build-blog/diaspora-down.png" alt="diaspora-down"></p><p>设置主题:<br>打开目录下文件:_config.yml,注意分号后面有一个空格<br><img src="/2018/07/19/build-blog/edit-theme.png" alt="theme"></p><p>修改主题为diaspora:<br><img src="/2018/07/19/build-blog/set-themes.png" alt="set-themes"></p><p>重新启动 </p><blockquote><p>hexo s</p></blockquote><p><img src="/2018/07/19/build-blog/diaspora-index.png" alt="diaspora-index"></p><h1 id="Github搭建"><a href="#Github搭建" class="headerlink" title="Github搭建"></a>Github搭建</h1><p>1.首先打开Github(<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> ),需先注册<br><img src="/2018/07/19/build-blog/github.png" alt="github"></p><p>2.新建仓库<br><img src="/2018/07/19/build-blog/github-start.png" alt="github-start"></p><p>新建好之后,你就可以通过XXX.github.io进行访问了</p><p>3.创建本地ssh并上传,由于我已经创建好了,这里我就不再创建了,找了一个教程…<br><img src="/2018/07/19/build-blog/ssh.png" alt="ssh"></p><p>4.修改本地hexo下的_config.yml<br><img src="/2018/07/19/build-blog/edit-config.png" alt="edit-config"></p><blockquote><p>deploy:<br> type: git<br> repo: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:mofada/mofada.github.io.git<br> branch: master   </p></blockquote><ul><li>type -&gt; 类型 这里使用git</li><li>repo -&gt; 仓库地址<br><img src="/2018/07/19/build-blog/repo.png" alt="repo"></li><li>branch -&gt; 分支 一般是master(视具体情况)</li></ul><p>5.部署代码</p><blockquote><p>hexo clean   #清除缓存文件<br>hexo g   #生成静态文件<br>hexo d   #部署代码<br><img src="/2018/07/19/build-blog/deploy.png" alt="deploy"></p></blockquote><h1 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h1><p>什么?觉得xxx.github.io很丑?怎么办,自己注册域名<br>1.购买域名,国内可以在<a href="https://www.aliyun.com/" target="_blank" rel="noopener">阿里云</a> /<a href="https://cloud.tencent.com/" target="_blank" rel="noopener">腾讯云</a> 等等注册域名,购买域名之后还需要进行备案,否则无法直接访问.因为我的域名是在腾讯云购买的,所以这里以腾讯云为例:</p><ul><li><p>搜索域名<br><img src="/2018/07/19/build-blog/search-domain.png" alt="搜索域名"></p></li><li><p>域名管理<br><img src="/2018/07/19/build-blog/domain-manager.png" alt="域名管理"></p></li><li><p>域名解析<br><img src="/2018/07/19/build-blog/domain-analysis.png" alt="域名解析"></p></li></ul><p>2.绑定域名<br><img src="/2018/07/19/build-blog/setting.png" alt="设置界面"></p><p>下拉找到 GitHub Pages<br><img src="/2018/07/19/build-blog/setting-page.png" alt="设置域名"></p><p>3.绑定完成</p><h1 id="新文章"><a href="#新文章" class="headerlink" title="新文章"></a>新文章</h1><p>1.hexo new “文件名”<br><img src="/2018/07/19/build-blog/new-article.png" alt="新文章"></p><p>2.在 source/_posts/ 目录下找到 test.md</p><p>3.开始编写吧(<a href="https://baike.baidu.com/item/markdown/3245829?fr=aladdin" target="_blank" rel="noopener">MarkDown</a> 语法)</p><p>4.当然你也可以使用 JetBrains 家族开发工具进行编写,像我一样<br><img src="/2018/07/19/build-blog/intellij.png" alt="Intellij"></p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/07/19/hello-world/"/>
      <url>/2018/07/19/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
