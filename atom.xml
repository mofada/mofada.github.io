<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>发达小窝</title>
  
  <subtitle>记录成长每一滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-12T01:15:35.617Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>发达</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IP工具类</title>
    <link href="http://yoursite.com/2018/09/12/InternetProtocolUtils/"/>
    <id>http://yoursite.com/2018/09/12/InternetProtocolUtils/</id>
    <published>2018-09-12T01:13:32.000Z</published>
    <updated>2018-09-12T01:15:35.617Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="java">import java.net.Inet4Address;import java.net.InetAddress;import java.net.NetworkInterface;import java.net.SocketException;import java.util.Enumeration;/** * @author : www10 * @Date : 2018/9/11 * @Description : 网络工具类 */public class InternetProtocolUtils {    /**     * 获取wifi和网线的ip     * @param context     * @return     */    public static String getInternetProtocol(Context context) {        NetworkInfo networkInfo = getNetworkInfo(context);        if (networkInfo != null &amp;&amp; networkInfo.isAvailable()) {            int type = networkInfo.getType();            switch (type) {                case ConnectivityManager.TYPE_WIFI:                    //wifi                    return getWifiInternetProtocol(context);                case ConnectivityManager.TYPE_ETHERNET:                    //网线                    return getEthernetInternetProtocol(context);                default:                    return &quot;请连接wifi或者插上网线&quot;;            }        } else {            return &quot;网络不可用&quot;;        }    }    /**     * 插网线     *     * @param context     * @return     */    private static String getEthernetInternetProtocol(Context context) {        try {            for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface                    .getNetworkInterfaces(); en.hasMoreElements(); ) {                NetworkInterface intf = en.nextElement();                for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf                        .getInetAddresses(); enumIpAddr.hasMoreElements(); ) {                    InetAddress inetAddress = enumIpAddr.nextElement();                    if (!inetAddress.isLoopbackAddress()                            &amp;&amp; inetAddress instanceof Inet4Address) {                        return inetAddress.getHostAddress();                    }                }            }        } catch (SocketException ex) {            ex.printStackTrace();        }        return &quot;0.0.0.0&quot;;    }    /**     * 获取wifi地址     *     * @param context     */    private static String getWifiInternetProtocol(Context context) {        WifiManager wifiManager = (WifiManager) context.getApplicationContext().getSystemService                (Context.WIFI_SERVICE);        WifiInfo connectionInfo = null;        if (wifiManager != null) {            connectionInfo = wifiManager.getConnectionInfo();        }        int ipAddress = 0;        if (connectionInfo != null) {            ipAddress = connectionInfo.getIpAddress();        }        return intToIp(ipAddress);    }    /**     * 判断网络是否可用     *     * @param context     * @return     */    private static boolean networkAvailable(Context context) {        NetworkInfo networkInfo = getNetworkInfo(context);        return networkInfo != null &amp;&amp; networkInfo.isAvailable();    }    /**     * 获取网络管理类     *     * @param context     * @return     */    private static NetworkInfo getNetworkInfo(Context context) {        ConnectivityManager systemService = (ConnectivityManager) context                .getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);        if (systemService != null) {            return systemService.getActiveNetworkInfo();        } else {            return null;        }    }    /**     * int型ip转String     *     * @param i     * @return     */    private static String intToIp(int i) {        return (i &amp; 0xFF) + &quot;.&quot; +                ((i &gt;&gt; 8) &amp; 0xFF) + &quot;.&quot; +                ((i &gt;&gt; 16) &amp; 0xFF) + &quot;.&quot; +                (i &gt;&gt; 24 &amp; 0xFF);    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code class=&quot;java&quot;&gt;import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketE
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="ip" scheme="http://yoursite.com/tags/ip/"/>
    
      <category term="utils" scheme="http://yoursite.com/tags/utils/"/>
    
  </entry>
  
  <entry>
    <title>时间日期工具类</title>
    <link href="http://yoursite.com/2018/08/22/TimeUtils/"/>
    <id>http://yoursite.com/2018/08/22/TimeUtils/</id>
    <published>2018-08-22T02:57:05.000Z</published>
    <updated>2018-08-22T02:58:10.625Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="java">import android.text.format.DateUtils;import java.util.Calendar;import java.util.Date;import java.util.Locale;/** * @author : fada *         Date : 2018/8/16 *         Description : 时间日期工具类 */public class TimeUtils {    /**     * 是否是今天     *     * @param when     * @return     */    public static boolean isToday(long when) {        return DateUtils.isToday(when);    }    /**     * “HH:MM:SS”格式（24时制）     *     * @return     */    public static String hourMinterSecond() {        return hourMinterSecond(currentTimeMillis());    }    /**     * “HH:MM:SS”格式（24时制）     *     * @param date     * @return     */    public static String hourMinterSecond(long date) {        return String.format(Locale.CHINA, &quot;%tT&quot;, date);    }    /**     * 获取当前时间     *     * @return     */    public static long currentTimeMillis() {        return System.currentTimeMillis();    }    /**     * 一年中的天数（即年的第几天）     *     * @return     */    public static String dayOfYear() {        return dayOfYear(currentTimeMillis());    }    /**     * 一年中的天数（即年的第几天）     *     * @param date     * @return     */    public static String dayOfYear(long date) {        return String.format(Locale.CHINA, &quot;%tj&quot;, date);    }    /**     * 2位数字24时制的小时（不足2位前面补0）     *     * @return     */    public static String hour() {        return hour(currentTimeMillis());    }    /**     * 2位数字24时制的小时（不足2位前面补0）     *     * @param date     * @return     */    public static String hour(long date) {        return String.format(Locale.CHINA, &quot;%tH&quot;, date);    }    /**     * 2位数字的分钟（不足2位前面补0）     *     * @return     */    public static String minter() {        return minter(currentTimeMillis());    }    /**     * 2位数字的分钟（不足2位前面补0）     *     * @param date     * @return     */    public static String minter(long date) {        return String.format(Locale.CHINA, &quot;%tM&quot;, date);    }    /**     * 2位数字的秒（不足2位前面补0）     *     * @return     */    public static String second() {        return second(currentTimeMillis());    }    /**     * 2位数字的秒（不足2位前面补0）     *     * @param date     * @return     */    public static String second(long date) {        return String.format(Locale.CHINA, &quot;%tS&quot;, date);    }    /**     * 年月日 星期     *     * @return     */    public static String yearMonthDayWeekday() {        return yearMonthDayWeekday(currentTimeMillis());    }    /**     * 年月日 星期     *     * @param date     * @return     */    public static String yearMonthDayWeekday(long date) {        return String.format(Locale.CHINA, &quot;%s年%s月%s日 %s&quot;, year(date), month(date), day(date),                weekday(date));    }    /**     * 4位数字的年份（不足4位前面补0）     *     * @param date     * @return     */    public static String year(long date) {        return String.format(Locale.CHINA, &quot;%tY&quot;, date);    }    /**     * 两位数字的月份（不足两位前面补0）     *     * @param date     * @return     */    public static String month(long date) {        return String.format(Locale.CHINA, &quot;%tm&quot;, date);    }    /**     * 两位数字的日（不足两位前面补0     *     * @param date     * @return     */    public static String day(long date) {        return String.format(Locale.CHINA, &quot;%td&quot;, date);    }    /**     * 星期的全称     *     * @param date     * @return     */    public static String weekday(long date) {        return String.format(Locale.CHINA, &quot;%tA&quot;, date);    }    /**     * 4位数字的年份（不足4位前面补0）     *     * @return     */    public static String year() {        return year(currentTimeMillis());    }    /**     * 星期     *     * @return     */    public static String weekday() {        return weekday(currentTimeMillis());    }    /**     * 获取当前时间     *     * @return     */    public static Date getCurrent() {        return Calendar.getInstance().getTime();    }    /**     * 获取今天的日期     *     * @return     */    public static String today() {        return yearMonthDay();    }    /**     * “年-月-日”格式     *     * @return     */    public static String yearMonthDay() {        return yearMonthDay(currentTimeMillis());    }    /**     * “年-月-日”格式     *     * @param date     * @return     */    public static String yearMonthDay(long date) {        return String.format(Locale.CHINA, &quot;%tF&quot;, date);    }    /**     * 年-月-日 时:分     *     * @return     */    public static String yearMonthDayHourMinter() {        return yearMonthDayHourMinter(currentTimeMillis());    }    /**     * 年-月-日 时:分     *     * @param date     * @return     */    public static String yearMonthDayHourMinter(long date) {        return String.format(Locale.CHINA, &quot;%s %s&quot;, yearMonthDay(date), hourMinter(date));    }    /**     * “HH:MM”格式（24时制）     *     * @param date     * @return     */    public static String hourMinter(long date) {        return String.format(Locale.CHINA, &quot;%tR&quot;, date);    }    /**     * “HH:MM”格式（24时制）     *     * @return     */    public static String hourMinter() {        return hourMinter(currentTimeMillis());    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code class=&quot;java&quot;&gt;import android.text.format.DateUtils;

import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

/
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="utils" scheme="http://yoursite.com/tags/utils/"/>
    
      <category term="Date" scheme="http://yoursite.com/tags/Date/"/>
    
      <category term="Time" scheme="http://yoursite.com/tags/Time/"/>
    
  </entry>
  
  <entry>
    <title>软键盘工具类</title>
    <link href="http://yoursite.com/2018/08/20/KeyboardUtils/"/>
    <id>http://yoursite.com/2018/08/20/KeyboardUtils/</id>
    <published>2018-08-20T12:23:30.000Z</published>
    <updated>2018-09-12T01:15:35.549Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="json"> /** * 隐藏软件盘 * @param activity */public static void hideKeyboard(Activity activity) {    InputMethodManager imm = (InputMethodManager) activity.getSystemService(Context            .INPUT_METHOD_SERVICE);    // 隐藏软键盘    imm.hideSoftInputFromWindow(activity.getWindow().getDecorView().getWindowToken(), 0);}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code class=&quot;json&quot;&gt; /**
 * 隐藏软件盘
 * @param activity
 */
public static void hideKeyboard(Activity activity) {
    InputMethodManager imm
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="utils" scheme="http://yoursite.com/tags/utils/"/>
    
      <category term="keyboard" scheme="http://yoursite.com/tags/keyboard/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="cookie" scheme="http://yoursite.com/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title>React</title>
    <link href="http://yoursite.com/2018/08/06/React/"/>
    <id>http://yoursite.com/2018/08/06/React/</id>
    <published>2018-08-06T12:59:50.000Z</published>
    <updated>2018-08-07T03:55:06.996Z</updated>
    
    <content type="html"><![CDATA[<p>create-react-app提供了一个超级简单的方法，只需要在package.json文件中，加一个配置项就可以了。</p><p>比如：</p><pre><code class="json">{  &quot;proxy&quot;: &quot;http://localhost:3001/&quot;}</code></pre><p>至于你用的是http的何种请求库，都是一样的，不用改任何代码。这个选项，只对开发环境有效，线上环境还是保持react应用和api应用同一个端口。</p><p>使用PropTypes需要先安装</p><pre><code>npm install --save prop-types</code></pre><p>使用时</p><pre><code>import PropTypes from &#39;prop-types&#39;;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;create-react-app提供了一个超级简单的方法，只需要在package.json文件中，加一个配置项就可以了。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;{
  &amp;quot;proxy&amp;quot;: &amp;quot;http://l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>不滑动的ViewPager</title>
    <link href="http://yoursite.com/2018/07/27/NoSlideViewPager/"/>
    <id>http://yoursite.com/2018/07/27/NoSlideViewPager/</id>
    <published>2018-07-27T04:52:08.000Z</published>
    <updated>2018-07-27T04:53:20.387Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="java">import android.content.Context;import android.support.v4.view.ViewPager;import android.util.AttributeSet;import android.view.MotionEvent;/** * @author fada * @date 2018/4/20 */public class NoSlideViewPager extends ViewPager {    private boolean isCanScroll = false;    public NoSlideViewPager(Context context) {        super(context);    }    public NoSlideViewPager(Context context, AttributeSet attrs) {        super(context, attrs);    }    /**     * 设置其是否能滑动换页     *     * @param isCanScroll false 不能换页， true 可以滑动换页     */    public void setScanScroll(boolean isCanScroll) {        this.isCanScroll = isCanScroll;    }    @Override    public boolean onInterceptTouchEvent(MotionEvent ev) {        return isCanScroll &amp;&amp; super.onInterceptTouchEvent(ev);    }    @Override    public boolean onTouchEvent(MotionEvent ev) {        return isCanScroll &amp;&amp; super.onTouchEvent(ev);    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code class=&quot;java&quot;&gt;import android.content.Context;
import android.support.v4.view.ViewPager;
import android.util.AttributeSet;
import a
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="viewPager" scheme="http://yoursite.com/tags/viewPager/"/>
    
      <category term="view" scheme="http://yoursite.com/tags/view/"/>
    
  </entry>
  
  <entry>
    <title>UpdateAppHttpUtils</title>
    <link href="http://yoursite.com/2018/07/27/UpdateAppHttpUtils/"/>
    <id>http://yoursite.com/2018/07/27/UpdateAppHttpUtils/</id>
    <published>2018-07-27T02:56:34.000Z</published>
    <updated>2018-07-27T03:00:11.725Z</updated>
    
    <content type="html"><![CDATA[<p>基于第三方框架update-app,这个工具类有待完善,这里只是保存一下</p><pre><code class="groovy">compile &#39;com.qianwen:update-app:3.5.2&#39;</code></pre><pre><code class="java">import android.app.Activity;import android.support.annotation.NonNull;import android.text.TextUtils;import com.vector.update_app.HttpManager;import com.vector.update_app.UpdateAppBean;import com.vector.update_app.UpdateAppManager;import com.vector.update_app.UpdateCallback;import java.io.File;import java.io.FileOutputStream;import java.io.InputStream;import java.util.HashMap;import java.util.Map;import cn.dongchen.bigsteward.library_common.R;import cn.dongchen.bigsteward.library_common.gson.VersionGson;import cn.dongchen.bigsteward.library_common.network.RetrofitUtils;import cn.dongchen.bigsteward.library_common.network.result.BaseData;import cn.dongchen.bigsteward.library_common.permission.PermissionCallBack;import cn.dongchen.bigsteward.library_common.permission.PermissionsUtils;import cn.dongchen.bigsteward.library_common.rx.BaseObserver;import cn.dongchen.bigsteward.library_common.rx.BaseRxJava;import cn.dongchen.bigsteward.library_common.toast.ToastUtils;import io.reactivex.Observable;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.functions.Consumer;import io.reactivex.schedulers.Schedulers;/** * @author fada *         下载工具类 */public class UpdateAppHttpUtil implements HttpManager {    /**     * 更新版本     *     * @param activity     */    public static void updateVersion(Activity activity, boolean needToast) {        new PermissionsUtils                .Build()                .permissions(PermissionsUtils.PERMISSION_WRITE_EXTERNAL_STORAGE)                .message(&quot;允许应用程序写入外部存储&quot;)                .permissionCallBack(new PermissionCallBack() {                    @Override                    public void granted() {                        update(activity, needToast);                    }                    @Override                    public void refuse() {                        ToastUtils.getInstance().showText(&quot;您拒绝了权限,无法继续更新&quot;);                    }                    @Override                    public void noAgain() {                        ToastUtils.getInstance().showText(&quot;您拒绝了权限,无法继续更新&quot;);                    }                })                .build()                .getPermission(activity);    }    /**     * 更新app     *     * @param activity     * @param needToast     */    private static void update(Activity activity, boolean needToast) {        Map&lt;String, String&gt; params = new HashMap&lt;&gt;(2);        params.put(&quot;versionNum&quot;, SystemUtils.getVersionName(activity));        params.put(&quot;type&quot;, &quot;0&quot;);        new UpdateAppManager                .Builder()                //当前Activity                .setActivity(activity)                //更新地址                .setUpdateUrl(&quot;http://122.225.55.70:9880/Butler/checkVersionApp&quot;)                .setParams(params)                //实现httpManager接口的对象                .setHttpManager(new UpdateAppHttpUtil())                //设置主体色                .setThemeColor(activity.getResources().getColor(R.color.colorAccent))                //设置头图片                .setTopPic(R.drawable.update_dada)                .build()                .checkNewApp(new UpdateCallback() {                    @Override                    protected UpdateAppBean parseJson(String json) {                        UpdateAppBean updateAppBean = new UpdateAppBean();                        if (TextUtils.isEmpty(json)) {                            updateAppBean.setUpdate(&quot;No&quot;);                            if (needToast) {                                ToastUtils.getInstance().showText(&quot;已经是最新版了&quot;);                            }                            return updateAppBean;                        }                        VersionGson version = GsonUtils.getInstance().fromJson(json,                                VersionGson.class);                        //是否需要更新                        updateAppBean.setUpdate(&quot;Yes&quot;);                        //文件地址                        updateAppBean.setApkFileUrl(version.getUploadUrl());                        //新版本号                        updateAppBean.setNewVersion(version.getVersionNum());                        //强制更新                        updateAppBean.setConstraint(version.getNeedForceUpdate() == 0);                        //设置内容                        updateAppBean.setUpdateLog(version.getUpdateContent());                        return updateAppBean;                    }                    @Override                    protected void hasNewApp(UpdateAppBean updateApp, UpdateAppManager                            updateAppManager) {                        super.hasNewApp(updateApp, updateAppManager);                    }                    @Override                    protected void onAfter() {                        super.onAfter();                    }                    @Override                    protected void noNewApp(String error) {                        super.noNewApp(error);                    }                    @Override                    protected void onBefore() {                        super.onBefore();                    }                });    }    /**     * 异步get     *     * @param url      get请求地址     * @param params   get参数     * @param callBack 回调     */    @Override    public void asyncGet(@NonNull String url, @NonNull Map&lt;String, String&gt; params, @NonNull final    Callback callBack) {        Observable&lt;BaseData&lt;VersionGson&gt;&gt; observable = RetrofitUtils                .getInstance()                .getServerices()                .checkVersion(params);        BaseRxJava.bindRx(observable, new BaseObserver&lt;BaseData&lt;VersionGson&gt;&gt;() {            @Override            public void onError(String error) {                callBack.onError(error);            }            @Override            public void onNext(BaseData&lt;VersionGson&gt; versionGsonBaseData) {                VersionGson data = versionGsonBaseData.getData();                if (data != null &amp;&amp; versionGsonBaseData.getCode() != 0) {                    callBack.onResponse(data.toString());                } else {                    callBack.onResponse(&quot;&quot;);                }            }            @Override            public void onComplete() {            }        });    }    /**     * 异步post     *     * @param url      post请求地址     * @param params   post请求参数     * @param callBack 回调     */    @Override    public void asyncPost(@NonNull String url, @NonNull Map&lt;String, String&gt; params, @NonNull    final Callback callBack) {    }    /**     * 下载     *     * @param url      下载地址     * @param path     文件保存路径     * @param fileName 文件名称     * @param callback 回调     */    @Override    public void download(@NonNull String url, @NonNull String path, @NonNull String fileName,                         @NonNull final FileCallback callback) {        LogUtils.d(&quot;download() called with: url = [&quot; + url + &quot;], path = [&quot; + path + &quot;], fileName &quot; +                &quot;= [&quot; + fileName + &quot;], callback = [&quot; + callback + &quot;]&quot;);        callback.onBefore();        RetrofitUtils                .getInstance()                .getServerices()                .downloadFile(url)                .subscribeOn(Schedulers.io())                .map(responseBody -&gt; {                    File file = new File(path);                    //目录是否存在,不存在则创建                    if (!file.exists()) {                        file.mkdir();                    }                    //创建文件                    file = new File(file, fileName);                    //文件读写                    byte[] bytes = new byte[1024 * 1024];                    int len = 0;                    final long total = responseBody.contentLength();                    long sum = 0;                    FileOutputStream outputStream = new FileOutputStream(file);                    InputStream inputStream = responseBody.byteStream();                    while ((len = inputStream.read(bytes)) != -1) {                        outputStream.write(bytes, 0, len);                        outputStream.flush();                        sum += len;                        final float progress = sum * 1.0f / total;                        RetrofitUtils.getInstance().getRetrofit().callbackExecutor().execute(() -&gt; {                            callback.onProgress(progress, total);                        });                    }                    //关闭流                    outputStream.close();                    inputStream.close();                    return file;                })                .observeOn(AndroidSchedulers.mainThread())                .subscribe(new BaseObserver&lt;File&gt;() {                    @Override                    public void onError(String error) {                        callback.onError(error);                    }                    @Override                    public void onNext(File file) {                        callback.onResponse(file);                    }                    @Override                    public void onComplete() {                    }                });    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;基于第三方框架update-app,这个工具类有待完善,这里只是保存一下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;compile &amp;#39;com.qianwen:update-app:3.5.2&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;cod
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="update" scheme="http://yoursite.com/tags/update/"/>
    
      <category term="app" scheme="http://yoursite.com/tags/app/"/>
    
      <category term="apk" scheme="http://yoursite.com/tags/apk/"/>
    
  </entry>
  
  <entry>
    <title>权限请求工具类</title>
    <link href="http://yoursite.com/2018/07/27/permission/"/>
    <id>http://yoursite.com/2018/07/27/permission/</id>
    <published>2018-07-27T02:36:23.000Z</published>
    <updated>2018-07-27T02:51:20.340Z</updated>
    
    <content type="html"><![CDATA[<p>基于第三方框架AndPermission</p><pre><code class="groovy">def permission_version = &quot;2.0.0-rc11&quot;implementation &quot;com.yanzhenjie:permission:$permission_version&quot;</code></pre><p>工具类源码,使用方法在最底部</p><pre><code class="java">import android.Manifest;import android.app.Activity;import android.app.AlertDialog;import android.app.ProgressDialog;import android.content.Context;import android.content.DialogInterface;import com.yanzhenjie.permission.Action;import com.yanzhenjie.permission.AndPermission;import com.yanzhenjie.permission.SettingService;import java.util.List;/** * @author : fada * Date : 2018/7/27 * Description : 权限工具类 */public class PermissionsUtils {    public static final String DEFAULT_MESSAGE = &quot;拒绝此权限后您将无法继续使用APP,请同意该权限&quot;;    /**     * 允许应用程序读取用户的日历数据。     */    public static final String PERMISSION_READ_CALENDAR = Manifest.permission.READ_CALENDAR;    /**     * 允许应用程序写入用户的日历数据。     */    public static final String PERMISSION_WRITE_CALENDAR = Manifest.permission.WRITE_CALENDAR;    //permission group:CALENDA 用于与用户日历相关的运行时权限。    /**     * 要求能够访问摄像机设备     * 这将自动执行所有相机功能的}清单元素。如果您不需要所有相机功能，或者在相机不可用时无法正常操作，则必须根据需要修改清单，以便安装在不支持所有相机功能的设备上。     */    public static final String PERMISSION_CAMERA = Manifest.permission.CAMERA;    /**     * 允许应用程序写入用户的联系人数据。     */    public static final String PERMISSION_WRITE_CONTACTS = Manifest.permission.WRITE_CONTACTS;    //permission group:CAMERA 用于与访问摄像头或从设备捕捉图像/视频相关联的权限。    /**     * 允许应用程序读取用户的联系人数据。     */    public static final String PERMISSION_READ_CONTACTS = Manifest.permission.READ_CONTACTS;    //permission group:CONTACTS 用于与此设备上的联系人和配置文件相关的运行时权限。    /**     * 允许访问帐户服务中的帐户列表。GMail账户列表?     */    public static final String PERMISSION_GET_ACCOUNTS = Manifest.permission.GET_ACCOUNTS;    /**     * 允许应用程序访问精确的位置。     */    public static final String PERMISSION_ACCESS_FINE_LOCATION = Manifest.permission            .ACCESS_FINE_LOCATION;    /**     * 允许应用程序访问近似位置。     */    public static final String PERMISSION_ACCESS_COARSE_LOCATION = Manifest.permission            .ACCESS_COARSE_LOCATION;    //permission group:LOCATION 用于允许访问设备位置的权限。    /**     * 允许应用程序录制音频。     */    public static final String PERMISSION_RECORD_AUDIO = Manifest.permission.RECORD_AUDIO;    /**     * 允许只读访问电话状态, 包括设备的电话号码、当前的蜂窝网络信息、任何正在进行的呼叫的状态以及设备上注册的任何 PhoneAccounts 的列表     */    public static final String PERMISSION_READ_PHONE_STATE = Manifest.permission.READ_PHONE_STATE;    //permission group:MICROPHONE 用于与从设备访问麦克风音频相关的权限。请注意, 电话也会捕获音频, 但位于单独的 (更可见) 权限组中。    /**     * 允许应用程序在不经过拨号用户界面的情况下启动电话呼叫, 以便用户确认呼叫。     */    public static final String PERMISSION_CALL_PHONE = Manifest.permission.CALL_PHONE;    //permission group:PHONE 用于关联的电话功能的权限。    /**     * 允许应用程式读取使用者的通话记录。     */    public static final String PERMISSION_READ_CALL_LOG = Manifest.permission.READ_CALL_LOG;    /**     * 允许应用程序写入（但不读取）用户的通话记录数据。     */    public static final String PERMISSION_WRITE_CALL_LOG = Manifest.permission.WRITE_CALL_LOG;    /**     * 允许应用程序将语音邮件添加到系统中。     */    public static final String PERMISSION_ADD_VOICEMAIL = Manifest.permission.ADD_VOICEMAIL;    /**     * 允许应用程序使用SIP服务。     */    public static final String PERMISSION_USE_SIP = Manifest.permission.USE_SIP;    /**     * 允许应用程序查看在拨出电话期间拨打的号码，并可选择将呼叫重定向到其他号码或完全中止呼叫。     */    public static final String PERMISSION_PROCESS_OUTGOING_CALLS = Manifest.permission            .PROCESS_OUTGOING_CALLS;    /**     * 允许该应用接听来电。     */    public static final String PERMISSION_ANSWER_PHONE_CALLS = Manifest.permission            .ANSWER_PHONE_CALLS;    /**     * 允许读取设备的电话号码。这是由READ_PHONE_STATE授予的功能的一部分，但暴露于即时应用程序。     */    public static final String PERMISSION_READ_PHONE_NUMBERS = Manifest.permission            .READ_PHONE_NUMBERS;    /**     * 允许应用程序访问用户用来测量他/她身体内发生的事情的传感器的数据，例如心率。     */    public static final String PERMISSION_BODY_SENSORS = Manifest.permission.BODY_SENSORS;    /**     * 允许应用程式发送短讯。     */    public static final String PERMISSION_SEND_SMS = Manifest.permission.SEND_SMS;    //permission group:SENSORS 用于与访问人体或环境传感器相关的权限。    /**     * 允许应用程式接收短讯。     */    public static final String PERMISSION_RECEIVE_SMS = Manifest.permission.RECEIVE_SMS;    //permission group:SMS 用于与用户的SMS消息相关的运行时权限。    /**     * 允许应用程式读取短讯。     */    public static final String PERMISSION_READ_SMS = Manifest.permission.READ_SMS;    /**     * 允许应用程序接收 WAP 推送消息。     */    public static final String PERMISSION_RECEIVE_WAP_PUSH = Manifest.permission            .RECEIVE_WAP_PUSH;    /**     * 允许应用程序监视传入彩信消息。     */    public static final String PERMISSION_RECEIVE_MMS = Manifest.permission.RECEIVE_MMS;    /**     * 允许应用程序从外部存储中读取。     * 任何声明 WRITE_EXTERNAL_STORAGE 权限的应用程序都被隐式授予此权限。     * 此权限是从 API 级别19开始执行的。在 API 级别19之前, 此权限没有强制执行, 并且所有应用程序仍然可以从外部存储读取。您可以通过在运行 Android 4.1     * 或更高的设备上的 &#39;设置&#39; 应用程序中的     * &#39;开发人员选项&#39; 中启用 &#39;保护 USB 存储&#39; 来测试您的应用程序。     * 也从 API 级别19开始, 在 getExternalFilesDir (string) 和 getExternalCacheDir () 返回的应用程序特定目录中读写文件时,     * 不需要此权限。     */    public static final String PERMISSION_READ_EXTERNAL_STORAGE = Manifest.permission            .READ_EXTERNAL_STORAGE;    /**     * 允许应用程序写入外部存储。     * 从 API 级别19开始, 在 getExternalFilesDir (String) 和 getExternalCacheDir () 返回的应用程序特定目录中读写文件时,     * 不需要此权限。     */    public static final String PERMISSION_WRITE_EXTERNAL_STORAGE = Manifest.permission            .WRITE_EXTERNAL_STORAGE;    //permission group:STORAGE 用于与共享外部存储相关的运行时权限。    private static final String BUTTON_POSITIVE_TEXT = &quot;允许&quot;;    private static final String BUTTON_NEGATIVE_TEXT = &quot;拒绝&quot;;    /**     * 书否需要继续请求,当用户拒绝后继续请求,表示此权限特别重要     */    private boolean mNeedAgain;    /**     * 继续请求的信息,用来告诉用户这个权限干嘛的,拒绝会怎样     */    private String mMessage;    /**     * 接口回调,必须参数     */    private PermissionCallBack mPermissionCallBack;    /**     * 需要请求的权限,必须参数     */    private String[] mPermissions;    /**     * 构造函数     *     * @param needAgain          参数见 {@link Build#needAgain}     * @param message            参数见 {@link Build#message}     * @param permissionCallBack 参数见 {@link Build#permissionCallBack}     * @param permissions        参数见 {@link Build#permissions}     */    private PermissionsUtils(boolean needAgain, String message, PermissionCallBack            permissionCallBack, String[]                                     permissions) {        mNeedAgain = needAgain;        mMessage = message;        mPermissionCallBack = permissionCallBack;        mPermissions = permissions;    }    /**     * {@link Activity}     * activity     *     * @param activity activity     */    public void getPermission(Activity activity) {        checkNull(activity);        getPermissions(activity);    }    /**     * 判断是否是空     *     * @param object     */    private static void checkNull(Object object) {        if (object == null) {            throw new NullPointerException(&quot;null : &quot; + object);        }    }    /**     * 获取运行时权限     *     * @param context 封装后的请求类     */    public void getPermissions(final Context context) {        //检查callback是否为空        checkNull(mPermissionCallBack);        //检查权限是否是空        checkLength(mPermissions);        AndPermission                .with(context)                .runtime()                .permission(mPermissions)                .onGranted(new Action&lt;List&lt;String&gt;&gt;() {                    @Override                    public void onAction(List&lt;String&gt; data) {                        //用户同意,用户同意了你的权限                        mPermissionCallBack.granted();                    }                })                .onDenied(new Action&lt;List&lt;String&gt;&gt;() {                    @Override                    public void onAction(List&lt;String&gt; permissions) {                        //用户拒绝了你的权限                        if (AndPermission.hasAlwaysDeniedPermission(context, permissions)) {                            if (mNeedAgain) {                                //再次请求                                againPermission(context);                            } else {                                //不再提示                                mPermissionCallBack.noAgain();                            }                        } else {                            //用户拒绝                            mPermissionCallBack.refuse();                        }                    }                })                .start();    }    /**     * 检查数据长度是否为空     *     * @param objects     */    private static void checkLength(Object[] objects) {        if (objects == null || objects.length &lt; 1) {            throw new NullPointerException(&quot;null : &quot; + objects);        }    }    /**     * 再次申请权限     *     * @param context     */    private void againPermission(final Context context) {        if (AndPermission.hasAlwaysDeniedPermission(context, mPermissions)) {            final SettingService settingService = AndPermission.permissionSetting(context);            // 这里使用一个Dialog展示没有这些权限应用程序无法继续运行，询问用户是否去设置中授权。            ProgressDialog progressDialog = new ProgressDialog(context);            progressDialog.setMessage(mMessage);            progressDialog.setButton(AlertDialog.BUTTON_POSITIVE, BUTTON_POSITIVE_TEXT, (new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    //如果用户同意去设置：                    settingService.execute();                }            }));            progressDialog.setButton(AlertDialog.BUTTON_NEGATIVE, BUTTON_NEGATIVE_TEXT, new                    DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            // 如果用户不同意去设置：                            settingService.cancel();                            mPermissionCallBack.noAgain();                        }                    });            progressDialog.show();        }    }    /**     * {@link Context}     *     * @param context 上下文     */    public void getPermission(Context context) {        checkNull(context);        getPermissions(context);    }    /**     * {@link android.support.v4.app.Fragment}     *     * @param fragment fragment     */    public void getPermission(android.support.v4.app.Fragment fragment) {        checkNull(fragment);        getPermissions(fragment.getActivity());    }    /**     * {@link android.app.Fragment}     *     * @param fragment fragment     */    public void getPermission(android.app.Fragment fragment) {        checkNull(fragment);        getPermissions(fragment.getActivity());    }    /**     * @author fada     * @date 18-2-26     * 权限回调类     */    public interface PermissionCallBack {        /**         * 用户同意了权限         */        void granted();        /**         * 用户拒绝了权限         */        void refuse();        /**         * 用户拒绝了权限,并点击不再询问         */        void noAgain();    }    public static class Build {        /**         * 是否需要继续请求,当用户拒绝后继续请求,表示此权限特别重要         */        private boolean needAgain = false;        /**         * 继续请求的信息,用来告诉用户这个权限干嘛的,拒绝会怎样         */        private String message = DEFAULT_MESSAGE;        /**         * 接口回调,必须参数         */        private PermissionCallBack permissionCallBack;        /**         * 需要请求的权限,必须参数         */        private String[] permissions;        public Build() {        }        /**         * @param needAgain {@link Build#needAgain}         * @return 当前类         */        public Build needAgain(boolean needAgain) {            this.needAgain = needAgain;            return this;        }        /**         * @param message {@link Build#message}         * @return 当前类         */        public Build message(String message) {            this.message = message;            return this;        }        /**         * @param permissionCallBack {@link Build#permissionCallBack}         * @return 当前类         */        public Build permissionCallBack(PermissionCallBack permissionCallBack) {            this.permissionCallBack = permissionCallBack;            return this;        }        /**         * @param permissions {@link Build#permissions}         * @return 当前类         */        public Build permissions(String... permissions) {            this.permissions = permissions;            return this;        }        public PermissionsUtils build() {            return new PermissionsUtils(needAgain, message, permissionCallBack, permissions);        }    }}</code></pre><p>使用</p><pre><code class="java">new PermissionsUtils        .Build()        //哪些权限        .permissions(PermissionsUtils.PERMISSION_CAMERA, PermissionsUtils                .PERMISSION_READ_EXTERNAL_STORAGE)        //是否需要继续请求        .needAgain(true)        //拒绝时的提示消息        .message(&quot;拒绝该权限将导致应用无法继续使用,是否确定&quot;)        //回调        .permissionCallBack(new PermissionsUtils.PermissionCallBack() {            @Override            public void granted() {                //获取权限            }            @Override            public void refuse() {                //被拒绝            }            @Override            public void noAgain() {                //不再提示            }        })        .build()        .getPermission(this);</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;基于第三方框架AndPermission&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def permission_version = &amp;quot;2.0.0-rc11&amp;quot;
implementation &amp;quot;com.yanzhenjie:pe
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="utils" scheme="http://yoursite.com/tags/utils/"/>
    
      <category term="permission" scheme="http://yoursite.com/tags/permission/"/>
    
      <category term="andPermission" scheme="http://yoursite.com/tags/andPermission/"/>
    
  </entry>
  
  <entry>
    <title>网络请求工具类</title>
    <link href="http://yoursite.com/2018/07/27/NetWorkUtils/"/>
    <id>http://yoursite.com/2018/07/27/NetWorkUtils/</id>
    <published>2018-07-27T02:32:18.000Z</published>
    <updated>2018-07-27T04:51:03.603Z</updated>
    
    <content type="html"><![CDATA[<p>网络请求相关类,基于Retrofit</p><pre><code class="groovy">def retrofit_version = &quot;2.4.0&quot;implementation &quot;com.squareup.retrofit2:retrofit:$retrofit_version&quot;implementation &quot;com.squareup.retrofit2:converter-gson:$retrofit_version&quot;implementation &quot;com.squareup.retrofit2:converter-scalars:$retrofit_version&quot;implementation &quot;com.squareup.retrofit2:adapter-rxjava:$retrofit_version&quot;implementation &quot;com.squareup.retrofit2:adapter-rxjava2:$retrofit_version&quot;</code></pre><p>目录结构如下:<br>network<br>├─ api<br>│ &emsp;└─ ApiServices<br>├─ coverter<br>│ &emsp;├─ CustomGsonCoverterFactory<br>│ &emsp;├─ CustomGsonRequestBodyConverter<br>│ &emsp;└─ CustomGsonResponseBodyConverter<br>├─ interceptor<br>│ &emsp;└─ HTTPInterceptor<br>├─ livedata<br>│ &emsp;├─ LiveDataCallAdapter<br>│ &emsp;└─ LiveDataCallAdapterFactory<br>├─ result<br>│ &emsp;├─ BaseData<br>│ &emsp;├─ ResponseData<br>│ &emsp;└─ Status<br>├─ CookieManager<br>├─ Http<br>└─ RetrofitUtils  </p><hr><p>ApiServices api类</p><pre><code class="java">/** * @author fada * @date 18-3-8 * api */public interface ApiServices {}</code></pre><hr><p>coverter,自定义的工厂类,用于拦截返回结果,进行统一处理<br>CustomGsonCoverterFactory</p><pre><code class="java">import com.google.gson.Gson;import com.google.gson.TypeAdapter;import com.google.gson.reflect.TypeToken;import java.lang.annotation.Annotation;import java.lang.reflect.Type;import okhttp3.RequestBody;import okhttp3.ResponseBody;import retrofit2.Converter;import retrofit2.Retrofit;/** * @author : fada * Date : 2018/5/5 * Description : input your description */public class CustomGsonCoverterFactory extends Converter.Factory {    private final Gson gson;    private CustomGsonCoverterFactory(Gson gson) {        this.gson = gson;    }    public static CustomGsonCoverterFactory create() {        return create(new Gson());    }    public static CustomGsonCoverterFactory create(Gson gson) {        if (gson == null) {            throw new NullPointerException(&quot;gson == null&quot;);        }        return new CustomGsonCoverterFactory(gson);    }    @Override    public Converter&lt;ResponseBody, ?&gt; responseBodyConverter(Type type, Annotation[] annotations,                                                            Retrofit retrofit) {        return new CustomGsonResponseBodyConverter&lt;&gt;(gson, type);    }    @Override    public Converter&lt;?, RequestBody&gt; requestBodyConverter(Type type,                                                          Annotation[] parameterAnnotations,                                                          Annotation[] methodAnnotations,                                                          Retrofit retrofit) {        TypeAdapter&lt;?&gt; adapter = gson.getAdapter(TypeToken.get(type));        return new CustomGsonRequestBodyConverter&lt;&gt;(gson, adapter);    }}</code></pre><p>CustomGsonRequestBodyConverter</p><pre><code class="java">import com.google.gson.Gson;import com.google.gson.TypeAdapter;import com.google.gson.stream.JsonWriter;import java.io.IOException;import java.io.OutputStreamWriter;import java.io.Writer;import java.nio.charset.Charset;import cn.mofada.hellonavigation.utils.LogUtils;import okhttp3.MediaType;import okhttp3.RequestBody;import okio.Buffer;import retrofit2.Converter;/** * @author : fada * Date : 2018/5/5 * Description : input your description */public class CustomGsonRequestBodyConverter&lt;T&gt; implements Converter&lt;T, RequestBody&gt; {    private static final MediaType MEDIA_TYPE = MediaType.parse(&quot;application/json; charset=UTF-8&quot;);    private static final Charset UTF_8 = Charset.forName(&quot;UTF-8&quot;);    private final Gson gson;    private final TypeAdapter&lt;T&gt; adapter;    CustomGsonRequestBodyConverter(Gson gson, TypeAdapter&lt;T&gt; adapter) {        this.gson = gson;        this.adapter = adapter;    }    @Override    public RequestBody convert(T value) throws IOException {        Buffer buffer = new Buffer();        Writer writer = new OutputStreamWriter(buffer.outputStream(), UTF_8);        JsonWriter jsonWriter = gson.newJsonWriter(writer);        adapter.write(jsonWriter, value);        jsonWriter.close();        LogUtils.d(&quot;CustomGsonRequestBodyConverter ( convert ) : [ &quot; + jsonWriter.toString() + &quot; ] &quot;);        return RequestBody.create(MEDIA_TYPE, buffer.readByteString());    }}</code></pre><p>CustomGsonResponseBodyConverter</p><pre><code class="java">import com.google.gson.Gson;import java.io.IOException;import java.lang.reflect.Type;import cn.mofada.hellonavigation.utils.LogUtils;import okhttp3.ResponseBody;import retrofit2.Converter;/** * @author : fada * Date : 2018/5/5 * Description : input your description */public class CustomGsonResponseBodyConverter&lt;T&gt; implements Converter&lt;ResponseBody, T&gt; {    private static final String TAG = &quot;CustomGsonResponseBodyC&quot;;    private final Gson gson;    private final Type type;    CustomGsonResponseBodyConverter(Gson gson, Type type) {        this.gson = gson;        this.type = type;    }    @Override    public T convert(ResponseBody value) throws IOException {        //在这里进行拦截操作        String response = value.string();        LogUtils.d(&quot;CustomGsonResponseBodyConverter called with: response : [ &quot; + response + &quot;&quot; +                &quot; ] &quot;);        //        BaseData baseData = gson.fromJson(response, BaseData.class);        return gson.fromJson(response, type);    }}</code></pre><hr><p>interceptor,拦截器,打印请求信息</p><pre><code class="java">import java.io.IOException;import java.util.LinkedHashMap;import java.util.Map;import java.util.Set;import cn.mofada.hellonavigation.utils.LogUtils;import okhttp3.FormBody;import okhttp3.HttpUrl;import okhttp3.Interceptor;import okhttp3.Request;import okhttp3.Response;/** * @author : www10 * Date : 2018/7/21 * Description : 请求拦截器 */public class HTTPInterceptor implements Interceptor {    @Override    public Response intercept(Chain chain) throws IOException {        Request request = chain.request();        logRequest(request);        return chain.proceed(request);    }    /**     * 打印请求的信息     *     * @param request     */    private void logRequest(Request request) {        String method = request.method();        if (&quot;GET&quot;.equals(method)) {            //get请求            doGet(request);        } else if (&quot;POST&quot;.equals(method)) {            //post请求            doPost(request);        }    }    /**     * get请求     *     * @param request     */    private void doGet(Request request) {        Map&lt;String, Object&gt; params = new LinkedHashMap&lt;&gt;();        HttpUrl url = request.url();        Set&lt;String&gt; names = url.queryParameterNames();        params.put(&quot;url&quot;, url.url().toString());        for (String name : names) {            params.put(name, url.queryParameterValues(name));        }        logParams(params);    }    /**     * 处理post     *     * @param request     */    private void doPost(Request request) {        Map&lt;String, Object&gt; params = new LinkedHashMap&lt;&gt;();        params.put(&quot;url&quot;, request.url().url().toString());        FormBody body = null;        try {            body = (FormBody) request.body();            for (int i = 0; i &lt; body.size(); i++) {                params.put(body.encodedName(i), body.encodedValue(i));            }        } catch (Exception e) {            e.printStackTrace();        }        logParams(params);    }    /**     * 打印参数     *     * @param params     */    private void logParams(Map&lt;String, Object&gt; params) {        LogUtils.d( &quot;HTTPInterceptor called with: params = [&quot; + params + &quot;]&quot;);    }}</code></pre><hr><p>livedata,LiveData请求转换器,适配器<br>LiveDataCallAdapter</p><pre><code class="java">import android.arch.lifecycle.LiveData;import android.arch.lifecycle.MutableLiveData;import java.lang.reflect.Type;import cn.mofada.hellonavigation.network.result.ResponseData;import retrofit2.Call;import retrofit2.CallAdapter;import retrofit2.Callback;import retrofit2.Response;/** * @author fada * @date 18-3-8 */public class LiveDataCallAdapter&lt;R&gt; implements CallAdapter&lt;R, LiveData&lt;ResponseData&lt;Object&gt;&gt;&gt; {    private final Type responseType;    public LiveDataCallAdapter(Type responseType) {        this.responseType = responseType;    }    @Override    public Type responseType() {        return responseType;    }    @Override    public LiveData&lt;ResponseData&lt;Object&gt;&gt; adapt(final Call call) {        final MutableLiveData&lt;ResponseData&lt;Object&gt;&gt; liveData = new MutableLiveData&lt;&gt;();        liveData.postValue(ResponseData.loading());        call.enqueue(new Callback() {            @Override            public void onResponse(Call call, Response response) {                liveData.postValue(ResponseData.success(response.body()));            }            @Override            public void onFailure(Call call, Throwable t) {                liveData.postValue(ResponseData.error(t.getMessage()));            }        });        return liveData;    }}</code></pre><p>LiveDataCallAdapterFactory</p><pre><code class="java">import android.arch.lifecycle.LiveData;import java.lang.annotation.Annotation;import java.lang.reflect.ParameterizedType;import java.lang.reflect.Type;import cn.mofada.hellonavigation.network.result.ResponseData;import retrofit2.CallAdapter;import retrofit2.Retrofit;/** * @author fada * @date 18-3-8 */public class LiveDataCallAdapterFactory extends CallAdapter.Factory {    public static LiveDataCallAdapterFactory create() {        return new LiveDataCallAdapterFactory();    }    private LiveDataCallAdapterFactory() {    }    @Override    public CallAdapter&lt;?, ?&gt; get(Type returnType, Annotation[] annotations, Retrofit retrofit) {        //获取类型是否是livedata类型        // LiveData&lt;ResponseData&lt;*Gson&gt;&gt;        if (getRawType(returnType) != LiveData.class) {            return null;        }        //获取返回的类型 ResponseData&lt;*Gson&gt;        Type observableType = getParameterUpperBound(0, (ParameterizedType) returnType);        //判断外层是否是ResponseData,如果是则继续获取        if (getRawType(observableType) == ResponseData.class) {            // 获取最内层type            // *Gson            observableType = getParameterUpperBound(0, (ParameterizedType) observableType);        }else{            throw new IllegalStateException(&quot;Response must be like&quot;                    + &quot; LiveData&lt;ResponseData&lt;*Gson&gt;&gt;&quot;);        }        return new LiveDataCallAdapter&lt;&gt;(observableType);    }}</code></pre><hr><p>result,请求结果封装类<br>BaseData</p><pre><code class="java">/** * @author : fada *         Date : 2018/4/27 *         Description : input your description */public class BaseData&lt;T&gt; {    private String message;    private int code;    private int count;    private long currentTime;    private T data;    public int getCount() {        return count;    }    public void setCount(int count) {        this.count = count;    }    public long getCurrentTime() {        return currentTime;    }    public void setCurrentTime(long currentTime) {        this.currentTime = currentTime;    }    public int getCode() {        return code;    }    public void setCode(int code) {        this.code = code;    }    public T getData() {        return data;    }    public void setData(T data) {        this.data = data;    }    public String getMessage() {        return message == null ? &quot;--&quot; : message;    }    public void setMessage(String message) {        this.message = message;    }    @Override    public String toString() {        return &quot;BaseData{&quot; +                &quot;message=&#39;&quot; + message + &#39;\&#39;&#39; +                &quot;, code=&quot; + code +                &quot;, data=&quot; + data +                &#39;}&#39;;    }}</code></pre><p>ResponseData</p><pre><code class="java">/** * @author fada * @date 18-3-8 */public class ResponseData&lt;T&gt; {    private Status code;    private T data;    private String msg;    private ResponseData(Status code, T data, String msg) {        this.code = code;        this.data = data;        this.msg = msg;    }    @Override    public String toString() {        return &quot;ResponseData{&quot; +                &quot;code=&quot; + code +                &quot;, data=&quot; + data +                &quot;, msg=&#39;&quot; + msg + &#39;\&#39;&#39; +                &#39;}&#39;;    }    public Status getCode() {        return code;    }    public T getData() {        return data;    }    public String getMsg() {        return msg;    }    public static &lt;T&gt; ResponseData&lt;T&gt; success(T data) {        return new ResponseData&lt;&gt;(Status.SUCCESS, data, &quot;&quot;);    }    public static &lt;T&gt; ResponseData&lt;T&gt; loading() {        return new ResponseData&lt;&gt;(Status.LOADING, null, &quot;&quot;);    }    public static &lt;T&gt; ResponseData&lt;T&gt; error(String msg) {        return new ResponseData&lt;&gt;(Status.ERROR, null, msg);    }}</code></pre><p>Status</p><pre><code class="java">package cn.mofada.hellonavigation.network.result;/** * @author fada * @date 18-3-8 */public enum Status {    /**    请求成功     */    SUCCESS,    /**     * 加载中     */    LOADING,    /**     * 错误     */    ERROR}</code></pre><hr><p>CookieManager,会话保持类</p><pre><code class="java">import java.util.ArrayList;import java.util.HashMap;import java.util.List;import okhttp3.Cookie;import okhttp3.CookieJar;import okhttp3.HttpUrl;/** * @author fada * @date 18-2-26 * cookie回话保持类 */class CookieManager implements CookieJar {    private HashMap&lt;String, List&lt;Cookie&gt;&gt; cookies = new HashMap&lt;&gt;();    @Override    public void saveFromResponse(HttpUrl url, List&lt;Cookie&gt; cookies) {        this.cookies.put(url.host(), cookies);    }    @Override    public List&lt;Cookie&gt; loadForRequest(HttpUrl url) {        return this.cookies.get(url.host()) == null ? new ArrayList&lt;Cookie&gt;() : this.cookies.get                (url.host());    }}</code></pre><hr><p>Http,地址类</p><pre><code class="java">package cn.mofada.hellonavigation.network;/** * @author fada * @date 18-2-26 * 接口地址 */public class Http {    /**     * 项目正式地址     */    public static final String HTTP = &quot;http://www.mofada.cn&quot;;}</code></pre><hr><p>RetrofitUtils</p><pre><code class="java">import java.util.concurrent.TimeUnit;import cn.mofada.hellonavigation.network.livedata.LiveDataCallAdapterFactory;import cn.mofada.hellonavigation.network.api.ApiServices;import cn.mofada.hellonavigation.network.coverter.CustomGsonCoverterFactory;import cn.mofada.hellonavigation.network.interceptor.HTTPInterceptor;import okhttp3.OkHttpClient;import retrofit2.Retrofit;import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;import retrofit2.converter.scalars.ScalarsConverterFactory;/** * @author fada * @date 18-2-26 * retrofit 工具类 */public class RetrofitUtils {    /**     * 连接超时时间,单位s     */    private static final int CONNECT_TIME_OUT = 10;    /**     * 读取超时时间,单位s     */    private static final int READ_TIME_OUT = 10;    /**     * 写入超时时间,单位s     */    private static final int WRITE_TIME_OUT = 10;    /**     * 工具类单例     */    private static volatile RetrofitUtils sInstance;    /**     * retrofit实例     */    private final Retrofit mRetrofit;    /**     * 私有构造函数,进行单例模式,在初始化中进行retrofit的初始话     */    private RetrofitUtils() {        OkHttpClient okHttpClient = new OkHttpClient                .Builder()                //设置超时                .connectTimeout(CONNECT_TIME_OUT, TimeUnit.SECONDS)                .readTimeout(READ_TIME_OUT, TimeUnit.SECONDS)                .writeTimeout(WRITE_TIME_OUT, TimeUnit.SECONDS)                //设置会话保持                .cookieJar(new CookieManager())                .addInterceptor(new HTTPInterceptor())                .build();        mRetrofit = new Retrofit                .Builder()                .baseUrl(Http.HTTP)                .client(okHttpClient)                //添加gson转换器                .addConverterFactory(CustomGsonCoverterFactory.create())                //添加字符串转化器                .addConverterFactory(ScalarsConverterFactory.create())                //rxjava2转换器                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())                //livedata转换器                .addCallAdapterFactory(LiveDataCallAdapterFactory.create())                .build();    }    /**     * 获取api服务     *     * @return 返回服务接口类     */    public ApiServices getServerices() {        return mRetrofit.create(ApiServices.class);    }    /**     * 提供给外部的唯一获取实例方法     *     * @return 当前类的实例     */    public static RetrofitUtils getInstance() {        synchronized (RetrofitUtils.class) {            if (sInstance == null) {                sInstance = new RetrofitUtils();            }        }        return sInstance;    }    /**     * 获取retrofit     *     * @return retrofit实例     */    public Retrofit getRetrofit() {        return mRetrofit;    }    /**     * 获取api服务     *     * @param tClass 服务接口的class类     * @param &lt;T&gt;    服务接口的class类     * @return 返回服务接口类     */    public &lt;T&gt; T getServerices(Class&lt;T&gt; tClass) {        return mRetrofit.create(tClass);    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网络请求相关类,基于Retrofit&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def retrofit_version = &amp;quot;2.4.0&amp;quot;
implementation &amp;quot;com.squareup.retrofit2:ret
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="utils" scheme="http://yoursite.com/tags/utils/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="cookie" scheme="http://yoursite.com/tags/cookie/"/>
    
      <category term="retrofit" scheme="http://yoursite.com/tags/retrofit/"/>
    
      <category term="liveData" scheme="http://yoursite.com/tags/liveData/"/>
    
      <category term="interceptor" scheme="http://yoursite.com/tags/interceptor/"/>
    
      <category term="okhttp" scheme="http://yoursite.com/tags/okhttp/"/>
    
  </entry>
  
  <entry>
    <title>dp和px的转换，sp和px的转换的工具类</title>
    <link href="http://yoursite.com/2018/07/27/DensityUtil/"/>
    <id>http://yoursite.com/2018/07/27/DensityUtil/</id>
    <published>2018-07-27T02:28:02.000Z</published>
    <updated>2018-07-27T02:29:13.789Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="java">import android.content.Context;import android.util.TypedValue;/** * @author : fada * Date : 2018/7/27 * Description : dp和px的转换，sp和px的转换的工具类 */public class DensityUtil {    private DensityUtil() {    }    /**     * dp转px     */    public static int dp2px(Context context, float dpVal) {        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,                dpVal, context.getResources().getDisplayMetrics());    }    /**     * sp转px     */    public static int sp2px(Context context, float spVal) {        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,                spVal, context.getResources().getDisplayMetrics());    }    /**     * px转dp     */    public static float px2dp(Context context, float pxVal) {        final float scale = context.getResources().getDisplayMetrics().density;        return (pxVal / scale);    }    /**     * px转sp     */    public static float px2sp(Context context, float pxVal) {        return (pxVal / context.getResources().getDisplayMetrics().scaledDensity);    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code class=&quot;java&quot;&gt;import android.content.Context;
import android.util.TypedValue;

/**
 * @author : fada
 * Date : 2018/7/27
 * Descri
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="utils" scheme="http://yoursite.com/tags/utils/"/>
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
      <category term="px" scheme="http://yoursite.com/tags/px/"/>
    
      <category term="ps" scheme="http://yoursite.com/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>极光im工具类</title>
    <link href="http://yoursite.com/2018/07/27/JClientUtils/"/>
    <id>http://yoursite.com/2018/07/27/JClientUtils/</id>
    <published>2018-07-27T02:26:33.000Z</published>
    <updated>2018-07-27T02:31:32.644Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="java">import java.io.File;import java.io.FileNotFoundException;import java.util.List;import java.util.Map;import cn.jpush.im.android.api.JMessageClient;import cn.jpush.im.android.api.content.ImageContent;import cn.jpush.im.android.api.content.TextContent;import cn.jpush.im.android.api.exceptions.JMFileSizeExceedException;import cn.jpush.im.android.api.model.Conversation;import cn.jpush.im.android.api.model.Message;import cn.jpush.im.api.BasicCallback;/** * @author : fada *         Date : 2018/6/26 *         Description : 极光im工具类 */public class IMUtils {    /**     * 用户已存在     */    public static final int CODE_USER_EXIST = 898001;    /**     * 操作成功     */    public static final int CODE_SUCCESS = 0;    /**     * 用户注册     *     * @param username     * @param password     */    public static void register(String username, String password, BasicCallback callback) {        JMessageClient.register(username, password, callback);    }    /**     * 用户登录     *     * @param username     * @param password     * @param callback     */    public static void login(String username, String password, BasicCallback callback) {        JMessageClient.login(username, password, callback);    }    /**     * 创建会话     *     * @param userName     */    public static Conversation createConversation(String userName) {        return Conversation.createSingleConversation(userName);    }    /**     * 创建会话     *     * @param username     * @return     */    public static Conversation getConversion(String username) {        return JMessageClient.getSingleConversation(username);    }    /**     * 获取未读消息数     *     * @param conversation     * @return     */    public static int getUnreadCount(Conversation conversation) {        return conversation.getUnReadMsgCnt();    }    /**     * 创建文字消息     *     * @param userName     * @param message     */    public static Message createTextMessage(String userName, String message) {        return JMessageClient.createSingleTextMessage(userName, message);    }    /**     * 发送文字消息     *     * @param conversation     * @param message     * @return     */    public static Message sendTextMessage(Conversation conversation, String message) {        return conversation.createSendMessage(new TextContent(message));    }    /**     * 创建图片消息     *     * @param userName     * @param file     * @return     * @throws FileNotFoundException     */    public static Message createImageMessage(String userName, File file) throws            FileNotFoundException {        return JMessageClient.createSingleImageMessage(userName, file);    }    /**     * 创建图片消息     *     * @param conversation     * @param file     * @return     * @throws FileNotFoundException     */    public static Message sendImageMessage(Conversation conversation, File file) throws            FileNotFoundException {        return conversation.createSendMessage(new ImageContent(file));    }    /**     * 创建语音消息     *     * @param userName     * @param file     * @param duration     */    public static Message createVoiceMessage(String userName, File file, int duration) throws            FileNotFoundException {        return JMessageClient.createSingleVoiceMessage(userName, file, duration);    }    /**     * 创建位置消息     *     * @param userName  聊天对象的用户名     * @param latitude  纬度信息     * @param longitude 经度信息     * @param scale     地图缩放比例     * @param address   详细地址信息     * @return     * @throws FileNotFoundException     */    public static Message createLcationMessage(String userName, double latitude, double            longitude, int scale, String address) throws            FileNotFoundException {        return JMessageClient.createSingleLocationMessage(userName, &quot;&quot;, latitude, longitude,                scale, address);    }    /**     * 创建文件消息     *     * @param username     * @param file     * @param fileName     * @return     * @throws FileNotFoundException     * @throws JMFileSizeExceedException     */    public static Message createFileMessage(String username, File file, String            fileName) throws FileNotFoundException, JMFileSizeExceedException {        return JMessageClient.createSingleFileMessage(username, &quot;&quot;, file, fileName);    }    /**     * 创建自定义消息     *     * @param userName     * @param valuesMap     * @return     */    public static Message createCustomMessage(String userName, Map&lt;? extends String, ? extends            String&gt; valuesMap) {        return JMessageClient.createSingleCustomMessage(userName, valuesMap);    }    /**     * 发送消息     *     * @param message     */    public static void sendMessage(Message message) {        JMessageClient.sendMessage(message);    }    /**     * 获取所有消息     *     * @param conversation     * @return     */    public static List&lt;Message&gt; allMessage(Conversation conversation) {        return conversation.getAllMessage();    }    /**     * 获取单个会话     *     * @param userName     * @return     */    public static Conversation getConversation(String userName) {        return JMessageClient.getSingleConversation(userName);    }    /**     * 获取会话列表     *     * @return     */    public static List&lt;Conversation&gt; getConversations() {        return JMessageClient.getConversationList();    }    /**     * 获取消息列表     *     * @return     */    public static List&lt;Message&gt; getMessage(Conversation conversation) {        return conversation.getAllMessage();    }    /**     * 操作是否成功     *     * @param code     * @return     */    public static boolean isSuccess(int code) {        return 0 == code;    }    /**     * 获取消息列表,按时间降序排列     *     * @param conversation     * @param offset     * @param limit     * @return     */    public static List&lt;Message&gt; getMessageNewest(Conversation conversation, int offset, int limit) {        return conversation.getMessagesFromNewest(offset, limit);    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code class=&quot;java&quot;&gt;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.List;
import java.util.Map;

import cn.
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="utils" scheme="http://yoursite.com/tags/utils/"/>
    
      <category term="jClient" scheme="http://yoursite.com/tags/jClient/"/>
    
      <category term="极光im" scheme="http://yoursite.com/tags/%E6%9E%81%E5%85%89im/"/>
    
  </entry>
  
  <entry>
    <title>App相关工具类</title>
    <link href="http://yoursite.com/2018/07/27/SystemUtils/"/>
    <id>http://yoursite.com/2018/07/27/SystemUtils/</id>
    <published>2018-07-27T02:19:29.000Z</published>
    <updated>2018-07-27T02:31:32.615Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="java">import android.Manifest;import android.content.Context;import android.content.pm.PackageManager;import android.support.v4.app.ActivityCompat;import android.telephony.TelephonyManager;import java.util.Locale;/** * @author : fada * Date : 2018/7/27 * Description : App相关工具类 */public class SystemUtils {    /**     * 获取当前本地apk的版本     *     * @param mContext     * @return     */    public static int getVersionCode(Context mContext) {        int versionCode = 0;        try {            versionCode = mContext.getPackageManager().                    getPackageInfo(mContext.getPackageName(), 0).versionCode;        } catch (PackageManager.NameNotFoundException e) {            LogUtils.e(e);        }        return versionCode;    }    /**     * 获取版本号名称     *     * @param context 上下文     * @return     */    public static String getVersionName(Context context) {        String verName = &quot;&quot;;        try {            verName = context.getPackageManager().                    getPackageInfo(context.getPackageName(), 0).versionName;        } catch (PackageManager.NameNotFoundException e) {            LogUtils.e(e);        }        return verName;    }    /**     * 获取应用程序名称     */    public static String getAppName(Context context) {        int resId = context.getApplicationInfo().labelRes;        return context.getResources().getString(resId);    }    /**     * 获取当前手机系统语言。     *     * @return 返回当前系统语言。例如：当前设置的是“中文-中国”，则返回“zh-CN”     */    public static String getSystemLanguage() {        return Locale.getDefault().getLanguage();    }    /**     * 获取当前系统上的语言列表(Locale列表)     *     * @return 语言列表     */    public static Locale[] getSystemLanguageList() {        return Locale.getAvailableLocales();    }    /**     * 获取当前手机系统版本号     *     * @return 系统版本号     */    public static String getSystemVersion() {        return android.os.Build.VERSION.RELEASE;    }    /**     * 获取手机型号     *     * @return 手机型号     */    public static String getSystemModel() {        return android.os.Build.MODEL;    }    /**     * 获取手机厂商     *     * @return 手机厂商     */    public static String getDeviceBrand() {        return android.os.Build.BRAND;    }    /**     * 获取手机IMEI(需要“android.permission.READ_PHONE_STATE”权限)     *     * @return 手机IMEI     */    public static String getIMEI(Context context) {        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.READ_PHONE_STATE) ==                PackageManager.PERMISSION_GRANTED) {            TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService(Context                    .TELEPHONY_SERVICE);            if (telephonyManager != null) {                return telephonyManager.getDeviceId();            } else {                return &quot;&quot;;            }        } else {            return &quot;&quot;;        }    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code class=&quot;java&quot;&gt;import android.Manifest;
import android.content.Context;
import android.content.pm.PackageManager;
import android.su
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="utils" scheme="http://yoursite.com/tags/utils/"/>
    
      <category term="System" scheme="http://yoursite.com/tags/System/"/>
    
      <category term="version" scheme="http://yoursite.com/tags/version/"/>
    
      <category term="versionName" scheme="http://yoursite.com/tags/versionName/"/>
    
      <category term="versionCode" scheme="http://yoursite.com/tags/versionCode/"/>
    
  </entry>
  
  <entry>
    <title>SharedPreferences工具类</title>
    <link href="http://yoursite.com/2018/07/27/PreferencesUtils/"/>
    <id>http://yoursite.com/2018/07/27/PreferencesUtils/</id>
    <published>2018-07-27T01:28:36.000Z</published>
    <updated>2018-07-27T02:31:32.630Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="java">import android.content.Context;import android.content.SharedPreferences;import java.util.Set;/** * @author : fada * Date : 2018/7/27 * Description : SharedPreferences工具类 */public class PreferencesUtils {    /**     * 存储的sharedpreferences文件名     */    private static final String FILE_NAME = &quot;config&quot;;    private static volatile PreferencesUtils singleton;    private SharedPreferences mPreferences;    private SharedPreferences.Editor mEditor;    private Context mContext;    private PreferencesUtils() {    }    public static PreferencesUtils getInstance() {        if (singleton == null) {            synchronized (PreferencesUtils.class) {                if (singleton == null) {                    singleton = new PreferencesUtils();                }            }        }        return singleton;    }    /**     * 初始化,建议在application里初始化     *     * @param context 上下文     */    public void init(Context context) {        mContext = context;        mPreferences = context.getSharedPreferences(FILE_NAME, Context.MODE_PRIVATE);        mEditor = mPreferences.edit();    }    public void put(String key, float value) {        mEditor.putFloat(key, value).apply();    }    public void put(String key, long value) {        mEditor.putLong(key, value).apply();    }    public void put(String key, Set&lt;String&gt; value) {        mEditor.putStringSet(key, value).apply();    }    public boolean getBoolean(String key, boolean defVal) {        return mPreferences.getBoolean(key, defVal);    }    public float getFloat(String key, float defVal) {        return mPreferences.getFloat(key, defVal);    }    public Set&lt;String&gt; getStringSet(String key, Set&lt;String&gt; defVal) {        return mPreferences.getStringSet(key, defVal);    }    public long getLong(String key, long defVal) {        return mPreferences.getLong(key, defVal);    }    /**     * 推送一个字符串     *     * @param key     * @param value     */    public void put(String key, String value) {        mEditor.putString(key, value).apply();    }    public Context getContext() {        return mContext;    }    public void put(String key, boolean value) {        mEditor.putBoolean(key, value).apply();    }    public void put(String key, int value) {        mEditor.putInt(key, value).apply();    }    /**     * 移除     *     * @param key     */    public void remove(String key) {        mEditor.remove(key).apply();    }    /**     * 取出一个字符串     *     * @param key     * @param defVal     * @return     */    public String getString(String key, String defVal) {        return mPreferences.getString(key, defVal);    }    public int getInt(String key, int defVal) {        return mPreferences.getInt(key, defVal);    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code class=&quot;java&quot;&gt;import android.content.Context;
import android.content.SharedPreferences;

import java.util.Set;

/**
 * @author : f
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="utils" scheme="http://yoursite.com/tags/utils/"/>
    
      <category term="preferences" scheme="http://yoursite.com/tags/preferences/"/>
    
      <category term="SharedPreferences" scheme="http://yoursite.com/tags/SharedPreferences/"/>
    
  </entry>
  
  <entry>
    <title>BaseFragment</title>
    <link href="http://yoursite.com/2018/07/26/BaseFragment/"/>
    <id>http://yoursite.com/2018/07/26/BaseFragment/</id>
    <published>2018-07-26T08:34:25.000Z</published>
    <updated>2018-07-27T02:21:03.897Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="java">import android.databinding.DataBindingUtil;import android.databinding.ViewDataBinding;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;/** * @author : fada * Date : 2018/7/26 * Description : input your description */public abstract class BaseFragment&lt;T extends ViewDataBinding&gt; extends Fragment {    public T mBinding;    /**     * 视图是否已经初初始化     */    protected boolean isInit = false;    protected boolean isLoad = false;    /**     * 视图是否已经对用户可见，系统的方法     */    @Override    public void setUserVisibleHint(boolean isVisibleToUser) {        super.setUserVisibleHint(isVisibleToUser);        isCanLoadData();    }    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable            Bundle savedInstanceState) {        mBinding = DataBindingUtil.inflate(inflater, getLayoutId(), container, false);        isInit = true;        /*         * 初始化的时候去加载数据         */        isCanLoadData();        return mBinding.getRoot();    }    /**     * 视图销毁的时候讲Fragment是否初始化的状态变为false     */    @Override    public void onDestroyView() {        super.onDestroyView();        isInit = false;        isLoad = false;    }    /**     * 设置Fragment要显示的布局     *     * @return 布局的layoutId     */    protected abstract int getLayoutId();    /**     * 是否可以加载数据     * 可以加载数据的条件：     * 1.视图已经初始化     * 2.视图对用户可见     */    private void isCanLoadData() {        if (!isInit) {            return;        }        if (getUserVisibleHint() &amp;&amp; !isLoad) {            lazyLoad();            isLoad = true;        } else {            if (isLoad) {                stopLoad();            }        }    }    /**     * 当视图初始化并且对用户可见的时候去真正的加载数据     */    protected abstract void lazyLoad();    /**     * 当视图已经对用户不可见并且加载过数据，如果需要在切换到其他页面时停止加载数据，可以覆写此方法     */    protected void stopLoad() {    }    /**     * 找出对应的控件     *     * @param id     * @param &lt;T&gt;     * @return     */    protected &lt;T extends View&gt; T findViewById(int id) {        return (T) getContentView().findViewById(id);    }    /**     * 获取设置的布局     *     * @return     */    protected View getContentView() {        return mBinding.getRoot();    }    /**     * 获取dataBinding     *     * @return     */    protected final T getBinding() {        return mBinding;    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code class=&quot;java&quot;&gt;import android.databinding.DataBindingUtil;
import android.databinding.ViewDataBinding;
import android.os.Bundle;
im
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="base" scheme="http://yoursite.com/tags/base/"/>
    
      <category term="fragment" scheme="http://yoursite.com/tags/fragment/"/>
    
  </entry>
  
  <entry>
    <title>BaseActivity</title>
    <link href="http://yoursite.com/2018/07/26/BaseActivity/"/>
    <id>http://yoursite.com/2018/07/26/BaseActivity/</id>
    <published>2018-07-26T08:34:25.000Z</published>
    <updated>2018-07-27T02:21:03.916Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="java">import android.databinding.DataBindingUtil;import android.databinding.ViewDataBinding;import android.os.Bundle;import android.support.annotation.LayoutRes;import android.support.annotation.Nullable;import android.support.v7.app.AppCompatActivity;import com.gyf.barlibrary.ImmersionBar;/** * @author : fada * Date : 2018/7/26 * Description : input your description */public abstract class BaseActivity&lt;T extends ViewDataBinding&gt; extends AppCompatActivity {    public T mBinding;    /**     * 是否位于前台     */    protected ImmersionBar mImmersionBar;    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        //状态栏        mImmersionBar = ImmersionBar                .with(this)                .statusBarDarkFont(true, 0.2f);        mImmersionBar.init();        mBinding = DataBindingUtil.setContentView(this, getLayoutId());    }    /**     * 获取布局id     *     * @return     */    protected abstract int getLayoutId();    @Override    protected void onDestroy() {        mImmersionBar.destroy();        super.onDestroy();    }    /**     * 获取databinging     * @return     */    public final T getBinding() {        return mBinding;    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code class=&quot;java&quot;&gt;import android.databinding.DataBindingUtil;
import android.databinding.ViewDataBinding;
import android.os.Bundle;
im
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="activity" scheme="http://yoursite.com/tags/activity/"/>
    
      <category term="base" scheme="http://yoursite.com/tags/base/"/>
    
  </entry>
  
  <entry>
    <title>组件化两个App</title>
    <link href="http://yoursite.com/2018/07/21/Componentized-Problem/"/>
    <id>http://yoursite.com/2018/07/21/Componentized-Problem/</id>
    <published>2018-07-21T09:04:15.000Z</published>
    <updated>2018-07-21T09:22:49.644Z</updated>
    
    <content type="html"><![CDATA[<p>在一次项目运行中,突然发现一个问题,组件化变成了两个app,如图所示:<br><img src="/2018/07/21/Componentized-Problem/Screenshot.png" alt="问题图"><br>可以看到我的组件化项目变成了两个,完了完了,凉了凉了,怎么办,项目就要上线了,然后检查项目配置,各种检查无果,以为是组件化的问题,后来github找了个demo,发现没有我这样的问题,新建项目,重新组件化,发现的么可以用,没有问题,准备把项目重新拷贝进去,在拷贝的过程中又出现这个问题,经过仔细检查,问题来了:</p><pre><code class="xml"> &lt;application&gt;    &lt;!--主界面--&gt;    &lt;activity android:name=&quot;.view.MainActivity&quot;         android:launchMode=&quot;singleInstance&quot;/&gt; &lt;/application&gt;</code></pre><p>在MainActivity中,设置了launchMode,当我去掉launchMode之后就正常了,问题就在这里.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在一次项目运行中,突然发现一个问题,组件化变成了两个app,如图所示:&lt;br&gt;&lt;img src=&quot;/2018/07/21/Componentized-Problem/Screenshot.png&quot; alt=&quot;问题图&quot;&gt;&lt;br&gt;可以看到我的组件化项目变成了两个,完了完了,凉了
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="组件化" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
      <category term="两个App" scheme="http://yoursite.com/tags/%E4%B8%A4%E4%B8%AAApp/"/>
    
  </entry>
  
  <entry>
    <title>NestedScrollView/ScrollView 设置文字自动滑动</title>
    <link href="http://yoursite.com/2018/07/20/NestedScrollView/"/>
    <id>http://yoursite.com/2018/07/20/NestedScrollView/</id>
    <published>2018-07-20T01:17:25.000Z</published>
    <updated>2018-07-21T07:56:12.212Z</updated>
    
    <content type="html"><![CDATA[<p>首先让我们看一个gif,来了解一下发生了什么<br><img src="/2018/07/20/NestedScrollView/Screenrecord.gif" alt="gif"></p><p>可以看到在这个界面中,点击了 + 号界面会自动滑动,从原来的顶部移动到点击的位置附近,我们看下代码<br>首先看一下布局<br><img src="/2018/07/20/NestedScrollView/layout.png" alt="布局界面"><br>可以看到,最外层是一个ConstraintLayout,然后嵌套了一个SmartRefreshLayout,再就是NestedScrollView,然后在界面中,我们点击了加号,就会把TextView的数量进行+1,可以发现ScrollView会进行滑动.</p><pre><code>tvMainGoodsNumber.setText(mDetailGson.getGoodsBean().numText());  </code></pre><p>当去掉setText()方法会发现不会滑动,猜测是setText()时发生了不为人知的事情….</p><p>解决方法有两种<br>1.在ScrollView的父布局,在我的布局中就是SmartRefreshLayout中添加  </p><pre><code>android:focusable=&quot;false&quot;android:focusableInTouchMode=&quot;true&quot;  </code></pre><p><img src="/2018/07/20/NestedScrollView/method1.png" alt="方法一"></p><p>2.重写NestedScrollView,并复写requestChildFocus(View child, View focused)方法</p><pre><code>public class ChildScrollView extends NestedScrollView {    public ChildScrollView(Context context) {        super(context);    }    public ChildScrollView(Context context, AttributeSet attrs) {        super(context, attrs);    }    public ChildScrollView(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);    }    @Override    public void requestChildFocus(View child, View focused) {    }}</code></pre><p>当设置文字时,ScrollView会调用requestChildFocus方法获取焦点,从而进行滑动</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先让我们看一个gif,来了解一下发生了什么&lt;br&gt;&lt;img src=&quot;/2018/07/20/NestedScrollView/Screenrecord.gif&quot; alt=&quot;gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到在这个界面中,点击了 + 号界面会自动滑动,从原来的顶部移动到点
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="ScrollView" scheme="http://yoursite.com/tags/ScrollView/"/>
    
      <category term="NestedScrollView" scheme="http://yoursite.com/tags/NestedScrollView/"/>
    
  </entry>
  
  <entry>
    <title>OKHTTP Session（会话保持）</title>
    <link href="http://yoursite.com/2018/07/19/OkHttp-Session/"/>
    <id>http://yoursite.com/2018/07/19/OkHttp-Session/</id>
    <published>2018-07-19T15:31:52.000Z</published>
    <updated>2018-07-21T08:28:25.704Z</updated>
    
    <content type="html"><![CDATA[<p>OkHttp不会自动保存session会话,需要我们手动去设置,代码如下</p><pre><code>mOkHttpClient = new OkHttpClient.Builder()    //设置连接超时    .connectTimeout(CONNECT_TIME_OUT, TimeUnit.SECONDS)    .readTimeout(READ_TIME_OUT, TimeUnit.SECONDS)    .writeTimeout(WRITE_TIME_OUT, TimeUnit.SECONDS)    //设置cookie    .cookieJar(new CookManager())    .build();</code></pre><p>在builder中设置cookieJar,但是cookieJar是个接口类,自定义一个CookManager类实现CookieJar接口.</p><pre><code>public class CookManager implements CookieJar {    //这里一定一定一定是HashMap&lt;String, List&lt;Cookie&gt;&gt;,是String,不是url.    private final HashMap&lt;String, List&lt;Cookie&gt;&gt; cookieStore = new HashMap&lt;&gt;();    @Override    public void saveFromResponse(HttpUrl url, List&lt;Cookie&gt; cookies) {        cookieStore.put(url.host(), cookies);    }    @Override    public List&lt;Cookie&gt; loadForRequest(HttpUrl url) {        List&lt;Cookie&gt; cookies = cookieStore.get(url.host());        return cookies != null ? cookies : new ArrayList&lt;Cookie&gt;();    }}</code></pre><p>!!!!!注意注意注意!!!!!!<br>HashMap的key是String!!!!直接传进去url,是没有效果的!!!!!</p><p>如何持久化?</p><pre><code>@Overridepublic void saveFromResponse(HttpUrl url, List&lt;Cookie&gt; cookies) {//session持久化方法,保存session参数for (Cookie cookie : cookies) {    Log.d(TAG, &quot;saveFromResponse() called with: url = [&quot; + url + &quot;], cookies = [&quot; + cookie + &quot;]&quot;);    Log.d(&quot;CookManager&quot;, &quot;saveFromResponse(CookManager.java:28): &quot; + cookie.name());    Log.d(&quot;CookManager&quot;, &quot;saveFromResponse(CookManager.java:28): &quot; + cookie.value());    Log.d(&quot;CookManager&quot;, &quot;saveFromResponse(CookManager.java:28): &quot; + cookie.domain());}Cookie cookie =new Cookie.Builder()        .name(&quot;JSESSIONID&quot;)        .value(&quot;FA69B5065A28377813B58E91004472B7&quot;)        .path(&quot;/foundation/&quot;)        .domain(&quot;115.29.186.247&quot;)        .build();cookies = new ArrayList&lt;Cookie&gt;();cookies.add(cookie);cookieStore.put(url.host(), cookies);}</code></pre><p>思路如上,保存Cookie基本参数，因业务不同而不同，如我的项目只需保存JSESSIONID,以及对应的值，path需要自己获取,domain不能为空，否则程序直接崩溃。在saveFromResponse方法中进行存储（本地存储），在loadForRequest中获取出来即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;OkHttp不会自动保存session会话,需要我们手动去设置,代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mOkHttpClient = new OkHttpClient.Builder()
    //设置连接超时
    .connectTimeout(CONNECT_T
      
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Windows下搭建Github博客</title>
    <link href="http://yoursite.com/2018/07/19/build-blog/"/>
    <id>http://yoursite.com/2018/07/19/build-blog/</id>
    <published>2018-07-19T05:52:05.000Z</published>
    <updated>2018-07-27T01:22:37.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这个文章干嘛的"><a href="#这个文章干嘛的" class="headerlink" title="这个文章干嘛的"></a>这个文章干嘛的</h1><p>这个文章教你使用Hexo的搭建Github个人博客，从0开始搭建，因为本人也是刚刚搭建好，好了，开始吧。<br><img src="/2018/07/19/build-blog/mofada.png" alt="我的博客"></p><h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><p>安装前提</p><ul><li><a href="https:  #git-scm.com/" target="_blank" rel="noopener">Git</a></li><li><a href="https:  #nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li></ul><p>1.git安装(<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a>)<br><img src="/2018/07/19/build-blog/git-down.png" alt="Git下载"></p><p>2.NodeJs安装(<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a>)<br><img src="/2018/07/19/build-blog/nodejs-down.png" alt="NodeJs"></p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>1.打开git-bash<br><img src="/2018/07/19/build-blog/git-open.png" alt="打开git"></p><p>2.切换到你要部署的目录</p><blockquote><p>如: D:\Hexo<br>cd D:   #切换到D盘<br>mkdir Hexo   #创建目录Hexo</p></blockquote><p><img src="/2018/07/19/build-blog/mkdir-hexo.png" alt="创建文件夹"></p><p>3.安装hexo</p><blockquote><p>cd Hexo   #切换到hexo目录<br>npm install -g hexo-cli   #安装hexo</p></blockquote><p>…….等待<br><img src="/2018/07/19/build-blog/install.png" alt="安装完成"></p><p>4.初始化</p><blockquote><p>hexo init   #初始化<br>npm install   #安装所需要的文件</p></blockquote><p><img src="/2018/07/19/build-blog/inited.png" alt="初始化完成"></p><p><img src="/2018/07/19/build-blog/npm-install.png" alt="文件安装"></p><p>5.安装完成,目录结构如下</p><blockquote><p>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes  </p></blockquote><p>6.启动hexo</p><blockquote><p>hexo g   #生成静态文件<br>hexo s   #启动服务器</p></blockquote><p><img src="/2018/07/19/build-blog/hexo-s.png" alt="启动服务器"></p><p>打开浏览器输入(<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>) 可查看(端口根据实际使用的端口)<br><img src="/2018/07/19/build-blog/default-theme.png" alt="启动服务器"></p><p>7.修改主题<br>什么,你觉得界面很丑不好看?我们可以更换<a href="https://hexo.io/themes" target="_blank" rel="noopener">主题</a>,找了半天发现一个还不错的主题<a href="https://github.com/Fechin/hexo-theme-diaspora" target="_blank" rel="noopener">hexo-theme-diaspora</a>,我们以这个为准切换主题<br><img src="/2018/07/19/build-blog/diaspora.png" alt="diaspora"></p><p>首先下载主题:</p><blockquote><p>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:Fechin/hexo-theme-diaspora.git themes/diaspora</p></blockquote><p><img src="/2018/07/19/build-blog/diaspora-down.png" alt="diaspora-down"></p><p>设置主题:<br>打开目录下文件:_config.yml,注意分号后面有一个空格<br><img src="/2018/07/19/build-blog/edit-theme.png" alt="theme"></p><p>修改主题为diaspora:<br><img src="/2018/07/19/build-blog/set-themes.png" alt="set-themes"></p><p>重新启动 </p><blockquote><p>hexo s</p></blockquote><p><img src="/2018/07/19/build-blog/diaspora-index.png" alt="diaspora-index"></p><h1 id="Github搭建"><a href="#Github搭建" class="headerlink" title="Github搭建"></a>Github搭建</h1><p>1.首先打开Github(<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> ),需先注册<br><img src="/2018/07/19/build-blog/github.png" alt="github"></p><p>2.新建仓库<br><img src="/2018/07/19/build-blog/github-start.png" alt="github-start"></p><p>新建好之后,你就可以通过XXX.github.io进行访问了</p><p>3.创建本地ssh并上传,由于我已经创建好了,这里我就不再创建了,找了一个教程…<br><img src="/2018/07/19/build-blog/ssh.png" alt="ssh"></p><p>4.修改本地hexo下的_config.yml<br><img src="/2018/07/19/build-blog/edit-config.png" alt="edit-config"></p><blockquote><p>deploy:<br> type: git<br> repo: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:mofada/mofada.github.io.git<br> branch: master   </p></blockquote><ul><li>type -&gt; 类型 这里使用git</li><li>repo -&gt; 仓库地址<br><img src="/2018/07/19/build-blog/repo.png" alt="repo"></li><li>branch -&gt; 分支 一般是master(视具体情况)</li></ul><p>5.部署代码</p><blockquote><p>hexo clean   #清除缓存文件<br>hexo g   #生成静态文件<br>hexo d   #部署代码<br><img src="/2018/07/19/build-blog/deploy.png" alt="deploy"></p></blockquote><h1 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h1><p>什么?觉得xxx.github.io很丑?怎么办,自己注册域名<br>1.购买域名,国内可以在<a href="https://www.aliyun.com/" target="_blank" rel="noopener">阿里云</a> /<a href="https://cloud.tencent.com/" target="_blank" rel="noopener">腾讯云</a> 等等注册域名,购买域名之后还需要进行备案,否则无法直接访问.因为我的域名是在腾讯云购买的,所以这里以腾讯云为例:</p><ul><li><p>搜索域名<br><img src="/2018/07/19/build-blog/search-domain.png" alt="搜索域名"></p></li><li><p>域名管理<br><img src="/2018/07/19/build-blog/domain-manager.png" alt="域名管理"></p></li><li><p>域名解析<br><img src="/2018/07/19/build-blog/domain-analysis.png" alt="域名解析"></p></li></ul><p>2.绑定域名<br><img src="/2018/07/19/build-blog/setting.png" alt="设置界面"></p><p>下拉找到 GitHub Pages<br><img src="/2018/07/19/build-blog/setting-page.png" alt="设置域名"></p><p>3.绑定完成</p><h1 id="新文章"><a href="#新文章" class="headerlink" title="新文章"></a>新文章</h1><p>1.hexo new “文件名”<br><img src="/2018/07/19/build-blog/new-article.png" alt="新文章"></p><p>2.在 source/_posts/ 目录下找到 test.md</p><p>3.开始编写吧(<a href="https://baike.baidu.com/item/markdown/3245829?fr=aladdin" target="_blank" rel="noopener">MarkDown</a> 语法)</p><p>4.当然你也可以使用 JetBrains 家族开发工具进行编写,像我一样<br><img src="/2018/07/19/build-blog/intellij.png" alt="Intellij"></p><p><a href="https://github.com/mofada/Hexo" target="_blank" rel="noopener">项目源码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;这个文章干嘛的&quot;&gt;&lt;a href=&quot;#这个文章干嘛的&quot; class=&quot;headerlink&quot; title=&quot;这个文章干嘛的&quot;&gt;&lt;/a&gt;这个文章干嘛的&lt;/h1&gt;&lt;p&gt;这个文章教你使用Hexo的搭建Github个人博客，从0开始搭建，因为本人也是刚刚搭建好，好了，开始
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/19/hello-world/"/>
    <id>http://yoursite.com/2018/07/19/hello-world/</id>
    <published>2018-07-19T02:07:33.013Z</published>
    <updated>2018-07-21T05:44:16.227Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
